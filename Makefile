# Makefile for SSC compiler using Flex, Bison, and LLVM

# Compiler
CXX = clang++
LLVM_CONFIG = llvm-config
LLC = llc  # LLVM static compiler
OPT = opt  # LLVM optimizer

# Directories
BUILD_DIR = build
SRC_DIR = .
IR_DIR = $(BUILD_DIR)/ir
DEBUG_DIR = $(BUILD_DIR)/debug
OBJ_DIR = $(BUILD_DIR)/obj
BIN_DIR = $(BUILD_DIR)/bin

# Create directories if they don't exist
$(shell mkdir -p $(BUILD_DIR) $(IR_DIR) $(DEBUG_DIR) $(OBJ_DIR) $(BIN_DIR))

# Files
LEXER = $(SRC_DIR)/ssc.l
PARSER = $(SRC_DIR)/ssc.y
IR_SRC = $(SRC_DIR)/IR.cpp
AST_SRC = $(SRC_DIR)/AST.cpp
SYMBOL_TABLE_SRC = $(SRC_DIR)/Symbol_Table.cpp
EXECUTABLE = $(BIN_DIR)/ssc_compiler
TEST_FILE = $(SRC_DIR)/input.ssc
IR_FILE = $(IR_DIR)/output.ll
OPT_IR_FILE = $(IR_DIR)/output_opt.ll  # Optimized LLVM IR
ASM_FILE = $(IR_DIR)/output.s
OBJ_FILE = $(OBJ_DIR)/output.o
BIN_FILE = $(BIN_DIR)/ssc_compiler_ir
DEBUG_FILE = $(DEBUG_DIR)/debug_output.txt  # File to be deleted before running and in clean

# Intermediate files generated by Flex and Bison
LEX_C = $(BUILD_DIR)/lex.yy.c
PARSER_C = $(BUILD_DIR)/ssc.tab.c
PARSER_H = $(BUILD_DIR)/ssc.tab.h

# Object files
IR_OBJ = $(OBJ_DIR)/IR.o
AST_OBJ = $(OBJ_DIR)/AST.o
SYMBOL_TABLE_OBJ = $(OBJ_DIR)/Symbol_Table.o

# LLVM configuration
LLVM_CXXFLAGS = $(shell $(LLVM_CONFIG) --cxxflags)
LLVM_LDFLAGS = $(shell $(LLVM_CONFIG) --ldflags)
LLVM_LIBS = $(shell $(LLVM_CONFIG) --libs)

# Include paths
INCLUDE_PATHS = -I$(SRC_DIR)

# Detect OS for linker flags
ifeq ($(OS),Windows_NT)
    # Windows-specific linker flags
    LINKER_FLAGS = -L$(shell $(LLVM_CONFIG) --libdir) -lmsvcrt
else
    # Unix-like systems
    LINKER_FLAGS = -lc
endif

# Bison and Flex flags
BISON_FLAGS = -d
FLEX_FLAGS =

# Optimization level for opt (e.g., -O2, -O3)
OPT_LEVEL = -O2

# Default target: compile the entire project
all: $(EXECUTABLE)

# Generate the parser using Bison
$(PARSER_C) $(PARSER_H): $(PARSER)
	bison $(BISON_FLAGS) -o $(PARSER_C) $(PARSER)

# Generate the lexer using Flex
$(LEX_C): $(LEXER)
	flex $(FLEX_FLAGS) -o $(LEX_C) $(LEXER)

# Build IR.o from IR.c
$(IR_OBJ): $(IR_SRC) $(SRC_DIR)/IR.h
	$(CXX) $(LLVM_CXXFLAGS) $(INCLUDE_PATHS) -c $(IR_SRC) -o $(IR_OBJ)

# Build Symbol_Table.o from Symbol_Table.cpp
$(SYMBOL_TABLE_OBJ): $(SYMBOL_TABLE_SRC) $(SRC_DIR)/Symbol_Table.h
	$(CXX) $(LLVM_CXXFLAGS) $(INCLUDE_PATHS) -c $(SYMBOL_TABLE_SRC) -o $(SYMBOL_TABLE_OBJ)

# Build AST.o from AST.c (or AST.cpp if using C++)
$(AST_OBJ): $(AST_SRC) $(SRC_DIR)/AST.h $(SRC_DIR)/IR.h
	$(CXX) $(LLVM_CXXFLAGS) $(INCLUDE_PATHS) -c $(AST_SRC) -o $(AST_OBJ)

# Compile the SSC compiler with LLVM support (including IR.o and AST.o)
$(EXECUTABLE): $(LEX_C) $(PARSER_C) $(IR_OBJ) $(AST_OBJ) $(SYMBOL_TABLE_OBJ)
	$(CXX) $(LLVM_CXXFLAGS) $(INCLUDE_PATHS) -o $(EXECUTABLE) $(PARSER_C) $(LEX_C) $(IR_OBJ) $(AST_OBJ) $(SYMBOL_TABLE_OBJ) $(LLVM_LDFLAGS) $(LLVM_LIBS)

# Generate intermediate LLVM IR
ir: $(IR_FILE)

$(IR_FILE): $(EXECUTABLE) $(TEST_FILE)
	./$(EXECUTABLE) $(TEST_FILE) > $(IR_FILE) 2> $(DEBUG_FILE)
	test -s $(IR_FILE) || (echo "Error: $(IR_FILE) is empty" && exit 1)

# Optimize the LLVM IR using opt
opt: $(OPT_IR_FILE)

$(OPT_IR_FILE): $(IR_FILE)
	$(OPT) $(OPT_LEVEL) $(IR_FILE) -S -o $(OPT_IR_FILE)

# Compile LLVM IR to assembly
$(ASM_FILE): $(IR_FILE)
	$(LLC) -filetype=asm $(IR_FILE) -o $(ASM_FILE)

# Compile assembly to an object file
$(OBJ_FILE): $(ASM_FILE)
	clang -c $(ASM_FILE) -o $(OBJ_FILE)

# Link the object file to create an executable from IR
$(BIN_FILE): $(OBJ_FILE)
	clang -o $(BIN_FILE) $(OBJ_FILE) $(LINKER_FLAGS)

# Run the SSC compiler to generate IR, compile it, and run the executable
run: 
	# Remove debug_output.txt if it exists before running
	rm -f $(DEBUG_FILE)
	$(MAKE) ir
	llc -filetype=obj $(IR_FILE) -o $(OBJ_FILE)
	clang $(OBJ_FILE) -o $(BIN_FILE) $(LINKER_FLAGS)
	./$(BIN_FILE)

# Run the SSC compiler with optimized IR
run_opt: 
	# Remove debug_output.txt if it exists before running
	rm -f $(DEBUG_FILE)
	$(MAKE) opt
	llc -filetype=obj $(OPT_IR_FILE) -o $(OBJ_FILE)
	clang $(OBJ_FILE) -o $(BIN_FILE) $(LINKER_FLAGS)
	./$(BIN_FILE)

# Debug target: run the compiler without redirecting output
debug: $(EXECUTABLE)
	./$(EXECUTABLE) $(TEST_FILE)

# Clean up generated files
clean:
	rm -f $(LEX_C) $(PARSER_C) $(PARSER_H) $(EXECUTABLE) $(IR_FILE) $(OPT_IR_FILE) $(ASM_FILE) $(OBJ_FILE) $(BIN_FILE) $(IR_OBJ) $(AST_OBJ) $(SYMBOL_TABLE_OBJ) $(DEBUG_FILE)

# Clean all generated files and any additional outputs
distclean: clean
	rm -f a.out ssc.output
	rm -rf $(BUILD_DIR)

# Show available Makefile commands
help:
	@echo "Available targets:"
	@echo "  make         - Compile the SSC compiler"
	@echo "  make ir      - Generate intermediate LLVM IR ($(IR_FILE))"
	@echo "  make opt     - Optimize the LLVM IR ($(OPT_IR_FILE))"
	@echo "  make run     - Generate IR, compile it, and run the executable"
	@echo "  make run_opt - Generate optimized IR, compile it, and run the executable"
	@echo "  make debug   - Run the compiler without redirecting output (for debugging)"
	@echo "  make clean   - Remove compiled and intermediate files"
	@echo "  make distclean - Remove all build files and output"
	@echo "  make help    - Display this help message"

.PHONY: all ir opt run run_opt debug clean distclean help
